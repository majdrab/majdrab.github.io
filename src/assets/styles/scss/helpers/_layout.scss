/* Grid */
.grid-half {
  display: grid;
  grid-template-columns: 1fr;
  gap: 2rem;
  @include breakpoint-up(xs) {
    grid-template-columns: 1fr 1fr;
  }
}

.full {
  grid-column: 1 / -1;
}

.content {
  grid-column: content;
}

.outer {
  grid-column: outer;
}

.column-start-half {
  grid-column-start: half;
}

.content-first {
  grid-row-start: 1;
  z-index: 2;
  grid-column: 1 / -1;
  grid-column-end: content-end;
  gap: 16px;
  @include breakpoint-up (md) {
    grid-column-start: content-start 1;
    grid-column-end: span 8 content-start;
    gap: 24px;
  }
  @include breakpoint-up (lg) {
    grid-column-start: content-start 1;
    grid-column-end: span 6 content-start;
  }
  & > .picture-container {
    @include breakpoint-down (md) {
      padding-right: 20px;
    }
  }
  &__p {
    padding: 40px 32px 40px;
    height: fit-content;
    @include breakpoint-down (md) {
      grid-column: content;
    }
    @include breakpoint-up (lg) {
      padding: 40px 40px 40px 60px;
    }
    @include breakpoint-up (xl) {
      padding: 60px 60px 60px 90px;
    }
    @include breakpoint-up (xxl) {
      padding: 80px calc(2 * var(--gap) + var(--max)) 80px calc(var(--gap) + var(--max));
    }
  }
}
.content-second {
  grid-row-start: 2;
  grid-column: 1 / -1;
  grid-column-start: content-start 1;
  margin-top: -40px;
  gap: 16px;
  @include breakpoint-up (md) {
    grid-column-start: content-gap 4;
    grid-column-end: content-end;
    gap: 24px;
  }
  @include breakpoint-up (lg) {
    grid-column-start: content-gap 6;
    grid-column-end: content-end;
    grid-row-start: 1;
    margin-top: 40px;
  }
  & > .picture-container {
    @include breakpoint-down (md) {
      padding-left: 20px;
    }
  }
  &__p {
    padding: 80px 32px 40px;
    @include breakpoint-down (md) {
      grid-column: content;
    }
    @include breakpoint-up (lg) {
      padding: 40px 40px 40px 60px;
    }
    @include breakpoint-up (xl) {
      padding: 60px 60px 60px 90px;
    }
    @include breakpoint-up (xxl) {
      padding: 80px calc(var(--gap) + var(--max)) 80px calc(2 * var(--gap) + var(--max));
    }
  }
}

@for $i from 1 through 12 {
  .content-start-#{$i} {
    grid-column-start: content-start $i;
  }

  .content-span-#{$i} {
      grid-column-end: span $i content-gap;
  }

  .row-#{$i} {
    grid-row-start: $i;
  }

  .row-span-#{$i} {
    grid-row-end: span $i;
  }
}

@for $i from 1 through 12 {
  @include breakpoint-up (sm) {
      .content-start-sm-#{$i} {
        grid-column-start: content-start $i;
      }
  }
  @include breakpoint-up (sm) {
      .content-span-sm-#{$i} {
          grid-column-end: span $i content-gap;
      }
  }
  @include breakpoint-up (sm) {
    .row-sm-#{$i} {
      grid-row-start: $i;
    }
  }
  @include breakpoint-up (sm) {
    .row-span-sm-#{$i} {
      grid-row-end: span $i;
    }
  }
}

@for $i from 1 through 12 {
  @include breakpoint-up (md) {
      .content-start-md-#{$i} {
          grid-column-start: content-start $i;
      }
  }
  @include breakpoint-up (md) {
      .content-span-md-#{$i} {
          grid-column-end: span $i content-gap;
      }
  }

  @include breakpoint-up (md) {
    .row-md-#{$i} {
      grid-row-start: $i;
    }
  }
  @include breakpoint-up (md) {
    .row-span-md-#{$i} {
      grid-row-end: span $i;
    }
  }
}

@for $i from 1 through 12 {
  @include breakpoint-up (lg) {
      .content-start-lg-#{$i} {
          grid-column-start: content-start $i;
      }
  }
  @include breakpoint-up (lg) {
      .content-span-lg-#{$i} {
          grid-column-end: span $i content-gap;
      }
  }

  @include breakpoint-up (lg) {
    .row-lg-#{$i} {
      grid-row-start: $i;
    }
  }
  @include breakpoint-up (lg) {
    .row-span-lg-#{$i} {
      grid-row-end: span $i;
    }
  }
}

@for $i from 1 through 12 {
  @include breakpoint-up (xl) {
      .content-start-xl-#{$i} {
          grid-column-start: content-start $i;
      }
  }
  @include breakpoint-up (xl) {
      .content-span-xl-#{$i} {
          grid-column-end: span $i content-gap;
      }
  }

  @include breakpoint-up (xl) {
    .row-xl-#{$i} {
      grid-row-start: $i;
    }
  }
  @include breakpoint-up (xl) {
    .row-span-xl-#{$i} {
      grid-row-end: span $i;
    }
  }
}

@for $i from 1 through 12 {
  @include breakpoint-up (xxl) {
      .content-start-xxl-#{$i} {
          grid-column-start: content-start $i;
      }
  }
  @include breakpoint-up (xxl) {
      .content-span-xxl-#{$i} {
          grid-column-end: span $i content-gap;
      }
  }

  @include breakpoint-up (xxl) {
    .row-xxl-#{$i} {
      grid-row-start: $i;
    }
  }
  @include breakpoint-up (xxl) {
    .row-span-xxl-#{$i} {
      grid-row-end: span $i;
    }
  }
}

/* Flex */

.flex {
  display: flex;
}

.flex-wrap {
  flex-wrap: wrap;
}

.flex-column {
  flex-direction: column;
}

/* Flex Direction */

@each $screen, $value in $screen-breakpoints {
  @if($value > 0) {
    .flex-row-#{$screen} {
      @include breakpoint-down ($screen) {
        flex-direction: column;
      }
    }
  }
}

@each $screen, $value in $screen-breakpoints {
  @if($value > 0) {
    .flex-column-#{$screen} {
      @include breakpoint-up ($screen) {
        flex-direction: column;
      }
    }
  }
}

@each $screen, $value in $screen-breakpoints {
  @if($value > 0) {
    .flex-reverse-#{$screen} {
      @include breakpoint-up ($screen) {
        flex-direction: row-reverse;
      }
    }
  }
}

/* Flex Helpers */

@for $i from 1 through 10 {
  .flex-#{$i}0 {
    flex: 0 1 #{$i + '0%'};
  }
}

/* Justify content */

.justify-start {
  justify-content: flex-start;
}
.justify-end {
  justify-content: flex-end;
}
.justify-center {
  justify-content: center;
}
.justify-between {
  justify-content: space-between;
}
.justify-around {
  justify-content: space-around;
}
.justify-evenly {
  justify-content: space-evenly;
}

/* Align items */

.items-start {
  align-items: flex-start;
}
.items-end {
  align-items: flex-end;
}
.items-center {
  align-items: center;
}
.items-baseline {
  align-items: baseline;
}
.items-stretch {
  align-items: stretch;
}

/* Align content */

.align-start {
  align-content: flex-start;
}
.align-end {
  align-content: flex-end;
}
.align-center {
  align-content: center;
}
.align-between {
  align-content: space-between;
}
.align-around {
  align-content: space-around;
}
.align-evenly {
  align-content: space-evenly;
}


/* Justify-self */

.justify-self-start {
  justify-self: flex-start;
}
.justify-self-end {
  justify-self: flex-end;
}
.justify-self-center {
  justify-self: center;
}
.justify-self-baseline {
  justify-self: baseline;
}

/* Align-self */

.align-self-start {
  align-self: flex-start;
}
.align-self-end {
  align-self: flex-end;
}
.align-self-center {
  align-self: center;
}
.align-self-baseline {
  align-self: baseline;
}
.align-self-stretch {
  align-self: stretch;
}


/* Square holder */

.square-holder {
  position: relative;
  overflow: hidden;
  box-sizing: border-box;

  &::before {
    content: '';
    display: block;
    padding-top: 100%;
  }

  .square-content {
    &img {
      object-fit: cover;
      object-position: bottom;
    }
    position: absolute;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
  }
}

/* Height & width */

.h-full {
  height: 100%;
}
.h-half {
  height: 50%;
}
.w-full {
  width: 100%;
}
.w-half {
  width: 50%;
}

// Max width

.max-w-half {
  max-width: 50%;
}
.max-w-container {
  max-width: var(--container-max-width);
}

.max-w-none {
  max-width: none;
}

@for $i from 1 through 12 {
  .max-w-#{$i}00 {
    max-width: #{$i}00px;
  }
}

// Max height

.max-h-half {
  max-height: 50%;
}

.max-h-470 {
  max-height: 470px;
}


@for $i from 1 through 10 {
  .max-h-#{$i}00 {
    max-height: #{$i}00px;
  }
}

/* Flex helpers */
.col-50 {
  flex: 0 0 50% !important;
}

.col-100 {
  flex: 0 1 100%;
}

/* z-index */

.index-negative {
  z-index: -1;
}

.index-top {
  z-index: $index-top;
}

.index-mid {
  z-index: $index-mid;
}

.index-bottom {
  z-index: $index-bottom;
}
.index-2 {
  z-index: 2;
}

/* Gaps */

@for $i from 0 through 30 {
  @if $i <= 16 or $i % 5 == 0 {
    .gap-#{$i} {
      gap: $base-padding * $i;
    }

    .gap-column-#{$i} {
      column-gap: $base-padding * $i;
    }

    .gap-row-#{$i} {
      row-gap: $base-padding * $i;
    }
  }
}

.gap-gap {
  gap: var(--gap)
}

/* Top/Bottom */

.top-0 {
  top: 0;
}

.left-0 {
  left: 0;
}

.top-full {
  top: 100%;
}

.bottom-0 {
  bottom: 0;
}

.bottom-full {
  bottom: 100%;
}


.shrink-0 {
  flex-shrink: 0;
}
